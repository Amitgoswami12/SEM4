1)

#!/bin/bash

echo "Enter first variable: "
read var1

echo "Enter second variable: "
read var2

echo "Choose an operation: "
echo "1. Addition"
echo "2. Subtraction"
echo "3. Multiplication"
echo "4. Division"
echo "5. Modulo division"

read choice

case $choice in
  1)
    result=$((var1 + var2))
    echo "Result of addition: $result"
    ;;
  2)
    result=$((var1 - var2))
    echo "Result of subtraction: $result"
    ;;
  3)
    result=$((var1 * var2))
    echo "Result of multiplication: $result"
    ;;
  4)
    result=$((var1 / var2))
    echo "Result of division: $result"
    ;;
  5)
    result=$((var1 % var2))
    echo "Result of modulo division: $result"
    ;;
  *)
    echo "Invalid choice. Please try again."
    ;;
esac

2)

#!/bin/bash

echo "Enter first number: "
read num1

echo "Enter second number: "
read num2

if [ $num1 -gt $num2 ]; then
  echo "The greatest number is $num1"
elif [ $num2 -gt $num1 ]; then
  echo "The greatest number is $num2"
else
  echo "The two numbers are equal"
fi


3)

#!/bin/bash

while true; do
  echo "Enter a number below 50 (or 'q' to quit): "
  read num
  
  if [ "$num" = "q" ]; then
    break
  fi
  
  if [ $num -lt 50 ]; then
    square=$((num * num))
    echo "The square of $num is $square"
  else
    echo "Number is not below 50, please try again."
  fi
done


4)
#!/bin/bash

echo "Enter a string to search for: "
read string

echo "Enter the filename: "
read filename

if grep -q "$string" "$filename"; then
  echo "The string '$string' was found in the file '$filename'"
else
  echo "The string '$string' was not found in the file '$filename'"
fi


5)

#!/bin/bash

echo "Enter the number of terms in the Fibonacci series: "
read n

a=0
b=1

echo "The Fibonacci series is: "

for ((i=0; i<n; i++)); do
  echo -n "$a "

  fn=$((a + b))
  a=$b
  b=$fn
done

echo ""


6)
#!/bin/bash

echo "Enter a number: "
read num

if [ $num -lt 2 ]; then
  echo "$num is not a prime number"
  exit 0
fi

for ((i=2; i<=num/2; i++)); do
  if [ $((num%i)) -eq 0 ]; then
    echo "$num is not a prime number"
    exit 0
  fi
done

echo "$num is a prime number"

7)

#!/bin/bash

echo "Enter the filename: "
read filename

if [ ! -f $filename ]; then
  echo "$filename does not exist"
  exit 1
fi

count=$(grep -o " " $filename | wc -l)

echo "The file $filename contains $count spaces."

8)

#!/bin/bash

echo "Enter the filename: "
read filename

if [ ! -f $filename ]; then
  echo "$filename does not exist"
  exit 1
fi

count=$(cat $filename | tr -d "[:space:]" | wc -c)

echo "The file $filename contains $count non-space characters."


9)
#!/bin/bash

echo "Enter the filename: "
read filename

if [ ! -f $filename ]; then
  echo "$filename does not exist"
  exit 1
fi

count=0

while read -n 1 char; do
  if [[ "$char" != " " && "$char" != $'\t' && "$char" != $'\n' ]]; then
    count=$((count+1))
  fi
done < $filename

echo "The file $filename contains $count non-space characters."


10)

#!/bin/bash

if [ $# -eq 0 ]; then
  echo "Please enter a string as command-line argument"
  exit 1
fi

string="$1"
reverse=""

for (( i=${#string}-1; i>=0; i-- )); do
  reverse="$reverse${string:$i:1}"
done

echo "The reversed string is: $reverse"

11)

#!/bin/bash

if [ $# -eq 0 ]; then
  echo "Please enter a string as command-line argument"
  exit 1
fi

string="$1"
reverse=""

for (( i=${#string}-1; i>=0; i-- )); do
  reverse="$reverse${string:$i:1}"
done

if [ "$string" = "$reverse" ]; then
  echo "$string is a palindrome"
else
  echo "$string is not a palindrome"
fi


12)

#!/bin/bash

if [ $# -eq 0 ]; then
  limit=50
else
  limit=$1
fi

sum=0

for (( i=1; i<=limit; i++ )); do
  sum=$((sum+i))
done

echo "The sum up to $limit is: $sum"


13)

#!/bin/bash

# read the input number
echo "Enter a number: "
read num

# initialize sum variable
sum=0

# loop through all odd numbers below num
for ((i=1; i<num; i+=2))
do
  echo $i
  # add the odd number to the sum
  sum=$((sum+i))
done

echo "The sum of all odd numbers below $num is: $sum"

14)

#!/bin/bash

echo "Enter a number: "
read num

# initialize sum variable
sum=0

# count the number of digits in the number
count=${#num}

# loop through each digit in the number
for ((i=0; i<$count; i++))
do
  # extract the current digit from the number
  digit=${num:$i:1}
  # raise the digit to the power of the number of digits
  power=$((digit**count))
  # add the powered digit to the sum
  sum=$((sum+power))
done

# check if the sum is equal to the input number
if [ $sum -eq $num ]
then
  echo "$num is an Armstrong number"
else
  echo "$num is not an Armstrong number"
fi

15)

#!/bin/bash

# First array
array1=(1 2 3 4 5)

# Second array
array2=(6 7 8 9 10)

# Length of arrays
n=${#array1[@]}

# Resultant array
result=()

# Loop through the arrays and add the elements
for ((i=0; i<$n; i++))
do
  sum=$(( ${array1[$i]} + ${array2[$i]} ))
  result+=($sum)
done

# Display the result
echo "Resultant array: ${result[@]}"
